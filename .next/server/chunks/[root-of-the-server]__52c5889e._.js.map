{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/raksa/Work/Development/Websites/v-menu/src/app/shared/model/Order.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst OrderSchema = new mongoose.Schema({\n    table: {type: String,},\n    orderedItems: [],\n    orderedAt: { type: Date, default: Date.now() },\n    isDone: { type: Boolean, default: false }\n})\n\nexport const Order = mongoose.model('Order', OrderSchema, \"orders\") || mongoose.models.Order;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACpC,OAAO;QAAC,MAAM;IAAO;IACrB,cAAc,EAAE;IAChB,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAG;IAC7C,QAAQ;QAAE,MAAM;QAAS,SAAS;IAAM;AAC5C;AAEO,MAAM,QAAQ,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS,aAAa,aAAa,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/raksa/Work/Development/Websites/v-menu/src/app/shared/model/Item.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst ItemSchema = new mongoose.Schema({\n    _id: {type: String, required: true},\n    name: { type: String, required: true },\n    price: { type: Number, required: true },\n    image: { type: String, required: true },\n    isEnabled: { type: Boolean, default: true }\n})\n\nexport const Item = mongoose.models.Item || mongoose.model(\"Item\", ItemSchema);\n\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,KAAK;QAAC,MAAM;QAAQ,UAAU;IAAI;IAClC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,WAAW;QAAE,MAAM;QAAS,SAAS;IAAK;AAC9C;AAEO,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/raksa/Work/Development/Websites/v-menu/src/app/shared/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\"\n\nlet isConnected = false // track the connection status\n\nexport const connectToDB = async () => {\n    if (isConnected) return\n\n    try {\n        await mongoose.connect(\"mongodb+srv://ocraksa:MyMongo123@cluster0.xdar3x8.mongodb.net/v_menu?retryWrites=true&w=majority&appName=Cluster0\", {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n        } as any) // casting to `any` if TS complains\n\n        isConnected = true\n        console.log(\"✅ MongoDB connected\")\n    } catch (err) {\n        console.error(\"❌ MongoDB connection error:\", err)\n        throw err\n    }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,cAAc,MAAM,8BAA8B;;AAE/C,MAAM,cAAc;IACvB,IAAI,aAAa;IAEjB,IAAI;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,qHAAqH;YACxI,iBAAiB;YACjB,oBAAoB;QACxB,GAAU,mCAAmC;;QAE7C,cAAc;QACd,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACV;AACJ","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/raksa/Work/Development/Websites/v-menu/src/app/shared/model/TableOrder.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport {Order} from \"./Order\";\n\nconst TableOrderSchema = new mongoose.Schema({\n    table: {\n        type: String,\n        required: true\n    },\n    orders: [\n        {\n            type: mongoose.Schema.Types.ObjectId,\n            ref: \"Order\",\n        }\n    ],\n    isPayed: {\n        type: Boolean,\n        default: false\n    }\n});\n\nexport const TableOrder = mongoose.models.TableOrder || mongoose.model(\"TableOrder\", TableOrderSchema, \"table_orders\");\n"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,mBAAmB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACzC,OAAO;QACH,MAAM;QACN,UAAU;IACd;IACA,QAAQ;QACJ;YACI,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACT;KACH;IACD,SAAS;QACL,MAAM;QACN,SAAS;IACb;AACJ;AAEO,MAAM,aAAa,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,cAAc,kBAAkB","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///Users/raksa/Work/Development/Websites/v-menu/src/app/api/customer/service.ts"],"sourcesContent":["import {OrderInput} from \"@/app/shared/types/Order\";\nimport {Order as OrderModel} from \"@/app/shared/model/Order\";\nimport {Item} from \"@/app/shared/model/Item\";\nimport {connectToDB} from \"@/app/shared/lib/db\";\nimport {TableOrder} from \"@/app/shared/model/TableOrder\";\n\nexport async function fetchItems(){\n    await connectToDB();\n    const data = await Item.find();\n    return data;\n}\n\nexport async function placeOrder(order: OrderInput){\n    await connectToDB();\n    const savedOrder = new OrderModel(order);\n\n    const existingTableOrder = await TableOrder.findOne({\n        table: order.table,\n        isPayed: false\n    });\n\n    if (existingTableOrder) {\n        // 3. Append the new order's _id to the orders array\n        existingTableOrder.orders.push(savedOrder._id);\n        await existingTableOrder.save();\n        console.log(\"Updated existing TableOrder\");\n    } else {\n        // 4. If no such TableOrder exists, create a new one\n        const newTableOrder = new TableOrder({\n            table: order.table,\n            orders: [savedOrder._id],\n            isPayed: false\n        });\n\n        await newTableOrder.save();\n        console.log(\"Created new TableOrder\");\n    }\n\n    const result = await savedOrder.save();\n    return result;\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;AAEO,eAAe;IAClB,MAAM,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,OAAO,MAAM,uIAAA,CAAA,OAAI,CAAC,IAAI;IAC5B,OAAO;AACX;AAEO,eAAe,WAAW,KAAiB;IAC9C,MAAM,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD;IAChB,MAAM,aAAa,IAAI,wIAAA,CAAA,QAAU,CAAC;IAElC,MAAM,qBAAqB,MAAM,6IAAA,CAAA,aAAU,CAAC,OAAO,CAAC;QAChD,OAAO,MAAM,KAAK;QAClB,SAAS;IACb;IAEA,IAAI,oBAAoB;QACpB,oDAAoD;QACpD,mBAAmB,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG;QAC7C,MAAM,mBAAmB,IAAI;QAC7B,QAAQ,GAAG,CAAC;IAChB,OAAO;QACH,oDAAoD;QACpD,MAAM,gBAAgB,IAAI,6IAAA,CAAA,aAAU,CAAC;YACjC,OAAO,MAAM,KAAK;YAClB,QAAQ;gBAAC,WAAW,GAAG;aAAC;YACxB,SAAS;QACb;QAEA,MAAM,cAAc,IAAI;QACxB,QAAQ,GAAG,CAAC;IAChB;IAEA,MAAM,SAAS,MAAM,WAAW,IAAI;IACpC,OAAO;AACX","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///Users/raksa/Work/Development/Websites/v-menu/src/app/api/customer/route.ts"],"sourcesContent":["import {NextRequest, NextResponse} from \"next/server\";\nimport {fetchItems, placeOrder} from \"@/app/api/customer/service\";\nimport {Order, OrderInput} from \"@/app/shared/types/Order\";\n\nexport async function GET() {\n    try {\n        const data = await fetchItems();\n        return NextResponse.json(data);\n    } catch (err) {\n        return NextResponse.json({error: 'Something went wrong'}, {status: 500})\n    }\n}\n\nexport async function POST(req: NextRequest) {\n    try {\n        const body: OrderInput = await req.json();\n        console.log(body);\n        const result = await placeOrder(body);\n        return NextResponse.json(result);\n    } catch (err) {\n        return NextResponse.json({message: err});\n    }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IAClB,IAAI;QACA,MAAM,OAAO,MAAM,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAD;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAsB,GAAG;YAAC,QAAQ;QAAG;IAC1E;AACJ;AAEO,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,OAAmB,MAAM,IAAI,IAAI;QACvC,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAD,EAAE;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAS;QAAG;IAC1C;AACJ","debugId":null}}]
}